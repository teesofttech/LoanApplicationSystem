@page "/loans"
@using LoanApplicationSystem.Domain.Enums
@using LoanApplicationSystem.Services.Dto
@using LoanApplicationSystem.Services.Interfaces
@inject ILoanService _loanService
@inject NavigationManager Nav

<h3>Loan Applications</h3>
@if (loans == null)
{
    <p>Loading...</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Amount</th>
                <th>InterestRate</th>
                <th>LoanAmount</th>
                <th>Application Date</th>
                <th>Status</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var loan in loans)
            {
                <tr>
                    <td>@loan.ApplicantName</td>
                    <td>@loan.LoanAmount</td>
                    <td>@loan.InterestRate</td>
                    <td>@loan.LoanAmount</td>
                    <td>@loan.ApplicationDate.ToLocalTime().ToString("d MMM yyyy")</td>
                    <td>@loan.Status</td>
                    <td>
                        <button class="btn btn-sm btn-primary" @onclick="@(() => Nav.NavigateTo($"/edit-loan/{loan.Id}"))">Edit</button>
                        <button class="btn btn-sm btn-success" @onclick="() => ApproveLoan(loan.Id)">Approve</button>
                        <button class="btn btn-sm btn-info" @onclick="() => RejectLoan(loan.Id)">Reject</button>
                        <button class="btn btn-sm btn-danger" @onclick="() => DeleteLoan(loan.Id)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>


    <nav aria-label="Page navigation">
        <ul class="pagination">
            <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                <button class="page-link" @onclick="() => LoadPage(currentPage - 1)">Previous</button>
            </li>

            <li class="page-item @(currentPage == totalPages ? "disabled" : "")">
                <button class="page-link" @onclick="() => LoadPage(currentPage + 1)">Next</button>
            </li>
        </ul>
    </nav>

    <NavLink class="btn btn-success" href="/add-loan">Add New</NavLink>
}

@code {
    IEnumerable<LoanApplicationDto>? loans;
    private int currentPage = 1;
    private int pageSize = 10;
    private int totalPages;
    private int totalCount;

    protected override async Task OnInitializedAsync()
    {
        await LoadPage(1);
    }

    private async Task LoadPage(int pageNumber)
    {
        currentPage = pageNumber;
        var result = await _loanService.GetAllApplicationsAsync(currentPage, pageSize, CancellationToken.None);
        loans = result.loans;
        totalCount = result.totalCount;
        totalPages = (int)Math.Ceiling((double)totalCount / pageSize);
        StateHasChanged();
    }

    private async Task DeleteLoan(int id)
    {
        await _loanService.DeleteApplicationAsync(id, CancellationToken.None);
        await LoadPage(currentPage);
        StateHasChanged();
    }

    private async Task ApproveLoan(int id)
    {
        var result = await _loanService.GetApplicationByIdAsync(id, CancellationToken.None);
        result.Status = nameof(LoanStatus.Approved);

        await _loanService.UpdateApplicationAsync(result, CancellationToken.None);
        await LoadPage(currentPage);
        StateHasChanged();
    }

    private async Task RejectLoan(int id)
    {
        var result = await _loanService.GetApplicationByIdAsync(id, CancellationToken.None);
        result.Status = nameof(LoanStatus.Rejected);

        await _loanService.UpdateApplicationAsync(result, CancellationToken.None);
        await LoadPage(currentPage);
        StateHasChanged();
    }

}